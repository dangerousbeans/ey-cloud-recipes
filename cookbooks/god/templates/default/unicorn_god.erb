rails_env = ENV['RAILS_ENV'] || '<%= @environment %>'
rails_root = ENV['RAILS_ROOT'] || "/data/<%= @application %>/current"

God.watch do |w|
  w.name = "<%= @process_name %>"
  w.interval = 30.seconds # default

  # unicorn needs to be run from the rails root
  w.start = "/engineyard/bin/app_<%= @application %> start"

  # QUIT gracefully shuts down workers
  w.stop = "/engineyard/bin/app_<%= @application %> stop"

  # USR2 causes the master to re-create itself and spawn a new worker pool
  w.restart = "/engineyard/bin/app_<%= @application %> deploy"

  w.start_grace = 30.seconds
  w.restart_grace = 120.seconds
  w.pid_file = "/var/run/engineyard/unicorn_<%= @application %>.pid"

  w.uid = '<%= @user %>'
  w.gid = '<%= @group %>'

  w.behavior(:clean_pid_file)

  w.start_if do |start|
    start.condition(:process_running) do |c|
      c.interval = 5.seconds
      c.running = false
    end
  end

  w.restart_if do |restart|
    restart.condition(:memory_usage) do |c|
      c.above = <%= @memory %>.megabytes
      c.times = [3, 5] # 3 out of 5 intervals
    end
  end
end

Thread.new do
  loop do
    begin
      # unicorn workers
      #
      # ps output line format:
      # 31580 275444 unicorn_rails worker[15] -c /data/github/current/config/unicorn.rb -E production -D
      # pid ram command

      lines = `ps -e -www -o pid,rss,command | grep '<%= @process_name %> worker'`.split("\n")
      lines.each do |line|
        parts = line.split(' ')
        if parts[1].to_i > <%= @memory %>_000
          # tell the worker to die after it finishes serving its request
          ::Process.kill('QUIT', parts[0].to_i)
        end
      end
    rescue Object
      # don't die ever once we've tested this
      nil
    end

    sleep 30
  end
end

